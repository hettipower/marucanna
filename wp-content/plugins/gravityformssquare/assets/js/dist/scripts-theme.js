/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../../../assets/js/src/theme/index.js":
/*!**********************************************************!*\
  !*** ../../../assets/js/src/theme/index.js + 10 modules ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ../utils/src/index.js + 82 modules\nvar src = __webpack_require__(\"../utils/src/index.js\");\n// EXTERNAL MODULE: ../../@babel/runtime/helpers/esm/readOnlyError.js\nvar readOnlyError = __webpack_require__(\"../../@babel/runtime/helpers/esm/readOnlyError.js\");\n// EXTERNAL MODULE: ../../@babel/runtime/helpers/esm/asyncToGenerator.js\nvar asyncToGenerator = __webpack_require__(\"../../@babel/runtime/helpers/esm/asyncToGenerator.js\");\n// EXTERNAL MODULE: ../../@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__(\"../../@babel/runtime/helpers/esm/classCallCheck.js\");\n// EXTERNAL MODULE: ../../@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__(\"../../@babel/runtime/helpers/esm/createClass.js\");\n// EXTERNAL MODULE: ../../@babel/runtime/regenerator/index.js\nvar regenerator = __webpack_require__(\"../../@babel/runtime/regenerator/index.js\");\nvar regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);\n;// CONCATENATED MODULE: external \"jQuery\"\nvar external_jQuery_namespaceObject = jQuery;\nvar external_jQuery_default = /*#__PURE__*/__webpack_require__.n(external_jQuery_namespaceObject);\n;// CONCATENATED MODULE: ../../../assets/js/src/common/square/web-payments.js\n\n\n\n\n/* eslint-disable */\n\n\n\n/**\n * A simple wrapper around the Square object.\n */\nvar WebPayments = /*#__PURE__*/function () {\n  function WebPayments(formId, applicationId, locationId) {\n    (0,classCallCheck[\"default\"])(this, WebPayments);\n    this.formId = formId;\n    this.applicationId = applicationId;\n    this.locationId = locationId;\n    this.card = null;\n    this.payments = null;\n  }\n\n  /**\n   * @function getPaymentsApi\n   * @description Initializes and retrieves a Payments object from the Square SDK.\n   *\n   * @since 1.7\n   *\n   * @return {object} The Payments API object.\n   */\n  return (0,createClass[\"default\"])(WebPayments, [{\n    key: \"getPaymentsApi\",\n    value: function getPaymentsApi() {\n      if (!window.Square) {\n        throw new Error('Square.js failed to load properly');\n      }\n      if (this.payments === null) {\n        this.payments = window.Square.payments(this.applicationId, this.locationId);\n      }\n      return this.payments;\n    }\n\n    /**\n     * @function getCard\n     * @description Returns the card object if it already exists, otherwise initiates it.\n     *\n     * @since 1.7\n     *\n     * @param {object} styleObject An object that contains styling properties for the card.\n     *\n     * @return {Promise<object>}\n     */\n  }, {\n    key: \"getCard\",\n    value: (function () {\n      var _getCard = (0,asyncToGenerator[\"default\"])( /*#__PURE__*/regenerator_default().mark(function _callee(styleObject) {\n        return regenerator_default().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (this.payments === null) {\n                this.getPaymentsApi();\n              }\n              if (!(this.card !== null)) {\n                _context.next = 3;\n                break;\n              }\n              return _context.abrupt(\"return\", this.card);\n            case 3:\n              _context.prev = 3;\n              if (!styleObject) {\n                _context.next = 10;\n                break;\n              }\n              _context.next = 7;\n              return this.payments.card({\n                style: styleObject\n              });\n            case 7:\n              this.card = _context.sent;\n              _context.next = 13;\n              break;\n            case 10:\n              _context.next = 12;\n              return this.payments.card();\n            case 12:\n              this.card = _context.sent;\n            case 13:\n              return _context.abrupt(\"return\", this.card);\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](3);\n              throw new Error('Could not get card from payment API: ' + _context.t0.toString());\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[3, 16]]);\n      }));\n      function getCard(_x) {\n        return _getCard.apply(this, arguments);\n      }\n      return getCard;\n    }()\n    /**\n     * @function getTokenizeCard\n     * @description Tokenize the card object.\n     *\n     * @since 1.7\n     *\n     * @return {Promise<boolean | object>}\n     */\n    )\n  }, {\n    key: \"getTokenizeCard\",\n    value: (function () {\n      var _getTokenizeCard = (0,asyncToGenerator[\"default\"])( /*#__PURE__*/regenerator_default().mark(function _callee2() {\n        return regenerator_default().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(this.card === null || this.card.attached === false)) {\n                _context2.next = 2;\n                break;\n              }\n              throw new Error('Can not tokenize card that is not attached');\n            case 2:\n              _context2.prev = 2;\n              _context2.next = 5;\n              return this.card.tokenize();\n            case 5:\n              this.tokenizedCard = _context2.sent;\n              return _context2.abrupt(\"return\", this.tokenizedCard);\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](2);\n              throw new Error('Could not tokenize card: ' + _context2.t0.toString());\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[2, 9]]);\n      }));\n      function getTokenizeCard() {\n        return _getTokenizeCard.apply(this, arguments);\n      }\n      return getTokenizeCard;\n    }()\n    /**\n     * @param  configuration\n     * @function reConfigureCard\n     * @description Re Configures the card after it has been initialized and attached.\n     *\n     * @since 1.7\n     *\n     * @return {Promise<boolean | object>}\n     */\n    )\n  }, {\n    key: \"reConfigureCard\",\n    value: function reConfigureCard(configuration) {\n      if (this.card === null || this.card.attached === false) {\n        return;\n      }\n      return this.card.configure(configuration);\n    }\n  }]);\n}();\n\n;// CONCATENATED MODULE: ../../../assets/js/src/theme/square/a11y-error-handler.js\n\n\n/* eslint-disable */\n\n\n/**\n * Error handling UI and accessibility.\n */\nvar a11yErrorHandler = /*#__PURE__*/function () {\n  function a11yErrorHandler(types, formId, ccFieldId) {\n    (0,classCallCheck[\"default\"])(this, a11yErrorHandler);\n    /**\n     * List of messages to be spoken.\n     *\n     * @member {Array} speechMessages\n     */\n    this.speechMessages = [];\n\n    /**\n     * setTimeout Speak function handler.\n     *\n     * @int speaker\n     */\n    this.speaker = null;\n\n    /**\n     * Errors object, contains all current error messages with field types as keys.\n     *\n     * @Object errors\n     */\n    this.errors = {};\n\n    /**\n     * GFSquare input types (card number, cvv, ..etc ).\n     *\n     * @array types\n     */\n    this.types = types;\n\n    /**\n     * The form ID.\n     *\n     * @string formId\n     */\n    this.formId = formId;\n\n    /**\n     * The field ID.\n     *\n     * @string fieldId\n     */\n    this.ccFieldId = ccFieldId;\n  }\n\n  /**\n   * Adds an error.\n   *\n   * @param  type    field type.\n   * @param  message error message.\n   */\n  return (0,createClass[\"default\"])(a11yErrorHandler, [{\n    key: \"push\",\n    value: function push(type, message) {\n      // Sometimes different types return the same message.\n      // Since this is a single element, it doesn't make since to show the same message twice.\n      if (this.messageExists(message)) {\n        return;\n      }\n      // Make sure provided type is a field type we already have.\n      type = this.getErrorType(type);\n      this.errors[type] = message;\n      // Display error and add it to speech array.\n      this.declareError(type, message);\n      // delay invoking the speak function in case more errors are being pushed.\n      setTimeout(this.speak.bind(this), 500);\n    }\n\n    /**\n     * Loops through existing messages and makes sure the message about to be shown isn't already there.\n     *\n     * @since 1.7\n     *\n     * @param {string} message The new message.\n     *\n     * @return {boolean}\n     */\n  }, {\n    key: \"messageExists\",\n    value: function messageExists(message) {\n      var _this = this;\n      var exists = false;\n      Object.keys(this.errors).forEach(function (type) {\n        if (message === _this.errors[type]) {\n          exists = true;\n        }\n      });\n      return exists;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(type) {\n      type = this.getErrorType(type);\n      this.errors[type] = null;\n      // Remove error from display.\n      this.clearError(type);\n    }\n\n    /**\n     * Removes all errors and declares all good status! ready to submit.\n     */\n  }, {\n    key: \"clearErrors\",\n    value: function clearErrors() {\n      Object.keys(this.errors).forEach(function (type, index) {\n        this.clearError(type);\n      }.bind(this));\n      if (this.speaker) {\n        clearTimeout(this.speaker);\n        this.speaker = null;\n      }\n    }\n  }, {\n    key: \"getErrorType\",\n    value: function getErrorType(type) {\n      // Generic errors appear beneath after field container ( not beneath a particular input like card number ).\n      if (type == null || !type in Object.keys(this.types)) {\n        type = 'generic';\n      }\n      return type;\n    }\n\n    /**\n     * Removes error message from UI.\n     *\n     * @param  type field type.\n     */\n  }, {\n    key: \"clearError\",\n    value: function clearError(type) {\n      // Get field container.\n      var container = this.getFieldContainer(type);\n      // If validation message exist after container, find error div within and remove it.\n      var $validationMessageContainer = container.next('.validation_message');\n      if ($validationMessageContainer.length) {\n        $validationMessageContainer.find('div.' + type).remove();\n      }\n\n      // If card holder container, remove error class ( card details container error class is removed in inputEventReceived ).\n      if (type === 'cardHolderName') {\n        container.removeClass('SqPaymentForm--invalid');\n      }\n    }\n\n    /**\n     * Displays a single error, adds error message to speech array to be spoken later.\n     *\n     * @param {string}  type    field type.\n     * @param {string}  message error message.\n     * @param {boolean} muted   If the error should not be spoken.\n     */\n  }, {\n    key: \"declareError\",\n    value: function declareError(type, message) {\n      var muted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var container = this.getFieldContainer(type);\n\n      // Add error class to container.\n      container.addClass('SqPaymentForm--invalid');\n      // Make sure error container exists after field container, if not create it.\n      if (!container.next('.validation_message').length) {\n        container.after('<div class=\"gfield_description validation_message gfield_validation_message\"></div>');\n      }\n      // get error div or create it.\n      var $errorDiv = container.next('.validation_message').find('div.' + type);\n      if ($errorDiv.length) {\n        // If error div exists check if it has the same error, otherwise display new error.\n        var lastMessage = $errorDiv.text();\n        if (lastMessage !== message) {\n          $errorDiv.text(message);\n        }\n      } else {\n        // Error div for this type never existed, create and display it.\n        container.next('.validation_message').append('<div class=\"' + type + '\">' + message + '</div>');\n      }\n      // Add error message to speech array even if it existed before.\n      // Blind people need the error message to be spoken again if the error is triggered again while the error message is already displayed.\n      this.speechMessages.push(message);\n    }\n\n    /**\n     * Combines all current error messages to one message and speaks it.\n     */\n  }, {\n    key: \"speak\",\n    value: function speak() {\n      // if speak was already invoked, quit.\n      if (this.speaker !== null) {\n        return;\n      }\n      this.speaker = setTimeout(function () {\n        var toSpeak = '';\n        // Sometimes the same error message is added to the array twice when field loses focus before submit is clicked, filter repeated messages.\n        var uniqueErrors = this.speechMessages.filter(function (value, index, self) {\n          return self.indexOf(value) === index;\n        });\n        // Generate Error speech by imploding messages array into one string, calling wp.a11y.speak in a loop failed.\n        uniqueErrors.forEach(function (error, index) {\n          // separate error message by new line so VO don't announce them as one line ( dot was not enough ! ).\n          toSpeak += '\\n' + error;\n        });\n        // Finally speak.\n        wp.a11y.speak(toSpeak);\n        // Reset evey thing for next push.\n        this.speaker = null;\n        this.speechMessages = [];\n      }.bind(this), 250);\n    }\n\n    /**\n     * Gets field container\n     *\n     * @since 1.2\n     *\n     * @param  type field type.\n     *\n     *              return {jQuery}\n     */\n  }, {\n    key: \"getFieldContainer\",\n    value: function getFieldContainer(type) {\n      if (type === 'generic') {\n        return external_jQuery_default()('.ginput_container_square_card');\n      }\n      return external_jQuery_default()('#input_' + this.formId + '_' + this.ccFieldId + '_' + this.types[type]);\n    }\n  }]);\n}();\n\n// EXTERNAL MODULE: ../../@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(\"../../@babel/runtime/helpers/esm/defineProperty.js\");\n;// CONCATENATED MODULE: ../../../assets/js/src/common/square/helpers.js\n/* eslint-disable */\n\n/**\n * A collection of helper functions that are used by the frontend handler.\n */\nvar helpers = {\n  /**\n   * Converts an RGBA value to its corresponding hex representation.\n   *\n   * @param {string} color\n   *\n   * @return {string}\n   */\n  rgb2hex: function rgb2hex(color) {\n    var rgba = color.replace(/^rgba?\\(|\\s+|\\)$/g, '').split(',');\n    var hex = \"#\".concat(((1 << 24) + (parseInt(rgba[0]) << 16) + (parseInt(rgba[1]) << 8) + parseInt(rgba[2])).toString(16).slice(1));\n    return hex;\n  },\n  /**\n   * Gets field values.\n   *\n   * @param  field\n   * @return {string}\n   */\n  getBillingAddressMergeTag: function getBillingAddressMergeTag(field) {\n    if (field === '') {\n      return '';\n    }\n    return '{:' + field + ':value}';\n  },\n  /**\n   * Checks if we are on last page.\n   *\n   * @return {boolean}\n   */\n  isLastPage: function isLastPage() {\n    var targetPageInput = jQuery('#gform_target_page_number_' + this.formId);\n    if (targetPageInput.length > 0) {\n      return targetPageInput.val() == 0;\n    }\n    return true;\n  },\n  /**\n   * Checks if current page has the Square credit card field on it.\n   *\n   * @param  ccPage\n   * @return {boolean}\n   */\n  isCreditCardOnPage: function isCreditCardOnPage(ccPage) {\n    var currentPage = this.getCurrentPageNumber();\n\n    // if current page is false or no credit card page number, assume this is not a multi-page form.\n    if (!ccPage || !currentPage || this.isConversationalForm()) {\n      return true;\n    }\n    return ccPage == currentPage;\n  },\n  /**\n   * Gets current page number.\n   *\n   * @return {*}\n   */\n  getCurrentPageNumber: function getCurrentPageNumber() {\n    var currentPageInput = jQuery('#gform_source_page_number_' + this.formId);\n    return currentPageInput.length > 0 ? currentPageInput.val() : false;\n  },\n  /**\n   * Checks if a spinner should be added next to the submit button and adds one if needed.\n   *\n   * @param  isAjax\n   * @param  formId\n   */\n  maybeAddSpinner: function maybeAddSpinner(isAjax, formId) {\n    if (isAjax) {\n      return;\n    }\n    if (typeof gformAddSpinner === 'function') {\n      gformAddSpinner(formId);\n    } else if (jQuery('#gform_ajax_spinner_' + formId).length == 0) {\n      var spinnerUrl = gform.applyFilters('gform_spinner_url', gf_global.spinnerUrl, formId),\n        $spinnerTarget = gform.applyFilters('gform_spinner_target_elem', jQuery('#gform_submit_button_' + formId + ', #gform_wrapper_' + formId + ' .gform_next_button, #gform_send_resume_link_button_' + formId), formId);\n      $spinnerTarget.after('<img id=\"gform_ajax_spinner_' + formId + '\"  class=\"gform_ajax_spinner\" src=\"' + spinnerUrl + '\" alt=\"\" />');\n    }\n  },\n  /**\n   * Removes Square Card hidden inputs\n   *\n   * @param  form   form object\n   * @param  formId\n   */\n  resetSquareStatus: function resetSquareStatus(form, formId) {\n    // Remove appended inputs.\n    jQuery('#' + formId + '_square_nonce, #' + formId + '_square_credit_card_last_four, #' + formId + '_square_credit_card_type, #' + formId + '_square_verification').remove();\n  },\n  /**\n   * Resets form status when errors are received after trying to submit.\n   *\n   * @param  form       form object\n   * @param  formId\n   * @param  isLastPage\n   */\n  resetFormStatus: function resetFormStatus(form, formId) {\n    // Reset form status.\n    form.data('gfsquaresubmitting', false);\n    // Remove spinner.\n    var spinnerNodes = document.querySelectorAll('#gform_ajax_spinner_' + formId);\n    spinnerNodes.forEach(function (node) {\n      node.remove();\n    });\n\n    // must do this or the form cannot be submitted again.\n    if (this.isLastPage(formId)) {\n      window['gf_submitting_' + formId] = false;\n    }\n  },\n  /**\n   * Clears any displayed errors.\n   *\n   * @param  formId\n   * @param  fieldId\n   */\n  clearErrors: function clearErrors(formId, fieldId) {\n    var creditCardDetailContainer = jQuery('#input_' + formId + '_' + fieldId + '_1');\n    var cardHolderNameContainer = jQuery('#input_' + formId + '_' + fieldId + '_3');\n    if (creditCardDetailContainer.next('.validation_message').length) {\n      creditCardDetailContainer.next('.validation_message').html('');\n    }\n    if (cardHolderNameContainer.next('.validation_message').length) {\n      cardHolderNameContainer.next('.validation_message').html('');\n    }\n  },\n  /**\n   * Calculates the form total if needed.\n   *\n   * @param  formId\n   * @param  activeFeed\n   */\n  updatePaymentAmount: function updatePaymentAmount(formId, activeFeed) {\n    if (activeFeed.paymentAmount !== 'form_total') {\n      var price = GFMergeTag.getMergeTagValue(formId, activeFeed.paymentAmount, ':price'),\n        qty = GFMergeTag.getMergeTagValue(formId, activeFeed.paymentAmount, ':qty');\n      if (typeof price === 'string') {\n        price = GFMergeTag.getMergeTagValue(formId, activeFeed.paymentAmount + '.2', ':price');\n        qty = GFMergeTag.getMergeTagValue(formId, activeFeed.paymentAmount + '.3', ':qty');\n      }\n      window['gform_square_amount_' + formId] = price * qty;\n    } else if (activeFeed.paymentAmount === 'form_total') {\n      gformCalculateTotalPrice(formId);\n    }\n  },\n  /**\n   * @function isConversationalForm\n   * @description Determines if we are on conversational form mode\n   *\n   * @since 2.0\n   *\n   * @returns {boolean}\n   */\n  isConversationalForm: function isConversationalForm() {\n    return typeof gfcf_theme_config !== 'undefined' ? gfcf_theme_config !== null && typeof gfcf_theme_config.data !== 'undefined' ? gfcf_theme_config.data.is_conversational_form : undefined : false;\n  }\n};\n/* harmony default export */ var square_helpers = (helpers);\n;// CONCATENATED MODULE: ../../../assets/js/src/common/square/card-renderer.js\n\n\n\n\n\n/* eslint-disable */\n\n/* global gform, gforms_square_theme_strings */\n\n\n/**\n * Handles rendering the web payment card and updating its UI.\n */\nvar CardRenderer = /*#__PURE__*/function () {\n  /**\n   * @function constructor\n   * @description Card Renderer Constructor.\n   *\n   * @param {WebPayments}      webPayments  Square Web Payments SDK Wrapper.\n   * @param {a11yErrorHandler} errorStack   Errors a11y Handler.\n   * @param {number}           formId       The current Form ID.\n   * @param                    pageInstance\n   * @param                    strings\n   * @param {number}           fieldId      The Square Field ID.\n   * @param {object}           styleObject  The style object that contains the style selectors, properties and values that will be passed to the square SDK.\n   * @param {boolean}          pageType     Are we on the front end or the block editor.\n   */\n  function CardRenderer(webPayments, errorStack, formId, pageInstance, fieldId, styleObject) {\n    var pageType = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n    var strings = arguments.length > 7 ? arguments[7] : undefined;\n    (0,classCallCheck[\"default\"])(this, CardRenderer);\n    (0,defineProperty[\"default\"])(this, \"pageType\", null);\n    this.pageType = pageType;\n    this.webPayments = webPayments;\n    this.errorStack = errorStack;\n    this.formId = formId;\n    this.pageInstance = pageInstance;\n    this.fieldId = fieldId;\n    this.field = null;\n    this.cardHolderNameInput = null;\n    this.cardContainer = null;\n    this.isCardVisible = false;\n    this.styleObject = styleObject;\n    this.pageType = pageType;\n    this.strings = strings;\n    this.cardStyle = {};\n    this.card = null;\n    this.bindEvents();\n  }\n\n  /**\n   * @function bindEvents\n   * @description Binds events handlers for the form and feed conditional logic.\n   *\n   * @since 1.7\n   *\n   */\n  return (0,createClass[\"default\"])(CardRenderer, [{\n    key: \"bindEvents\",\n    value: (function () {\n      var _bindEvents = (0,asyncToGenerator[\"default\"])( /*#__PURE__*/regenerator_default().mark(function _callee() {\n        return regenerator_default().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(this.pageType !== 'front')) {\n                _context.next = 6;\n                break;\n              }\n              _context.t0 = external_jQuery_default()(document);\n              _context.next = 4;\n              return this.render.bind(this);\n            case 4:\n              _context.t1 = _context.sent;\n              _context.t0.ready.call(_context.t0, _context.t1);\n            case 6:\n              // After conditional logic evaluation, or conversational form next/prev button, trigger window resize to let the square IFrame re-calculate its size if the field became visible.\n              external_jQuery_default()(document).on('gform_post_conditional_logic', this.maybeReconfigureCardSize.bind(this));\n              gform.addAction('gform_frontend_feeds_evaluated', this.maybeReconfigureCardSize.bind(this));\n              document.addEventListener('gfcf/conversational/navigate/next', this.maybeReconfigureCardSize.bind(this));\n              document.addEventListener('gfcf/conversational/navigate/prev', this.maybeReconfigureCardSize.bind(this));\n              this.cardStyle = this.getCardConfigurationStyleObject();\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function bindEvents() {\n        return _bindEvents.apply(this, arguments);\n      }\n      return bindEvents;\n    }()\n    /**\n     * @function cacheElements\n     * @description Caches the elements used in the process of creating and submitting the form.\n     *\n     * @since 1.7\n     *\n     */\n    )\n  }, {\n    key: \"cacheElements\",\n    value: function cacheElements() {\n      this.field = document.getElementById('field_' + this.formId + '_' + this.fieldId);\n      this.cardHolderNameInput = document.getElementById('input_' + this.formId + '_' + this.fieldId + '_3');\n      this.cardContainer = document.getElementById('input_' + this.formId + '_' + this.fieldId + '_1');\n      this.fieldContainer = document.getElementById('input_' + this.formId + '_' + this.fieldId);\n    }\n\n    /**\n     * @function render\n     * @description Renders the square web payment card.\n     *\n     * @since 1.7\n     *\n     * @return {Promise<void>}\n     */\n  }, {\n    key: \"render\",\n    value: (function () {\n      var _render = (0,asyncToGenerator[\"default\"])( /*#__PURE__*/regenerator_default().mark(function _callee2() {\n        var styles;\n        return regenerator_default().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              this.cacheElements();\n              _context2.prev = 1;\n              styles = this.getCardConfigurationStyleObject();\n              _context2.next = 5;\n              return this.webPayments.getCard(styles);\n            case 5:\n              this.card = _context2.sent;\n              _context2.next = 8;\n              return this.card.attach(this.cardContainer);\n            case 8:\n              this.attached = _context2.sent;\n              /* When the field is rendered while hidden, the height of the IFrame is not calculated correctly\n              this is an issue on the Square side, after conditional logic we re-configure the card and let it resize\n              properly, so we have to hide it until we are sure it looks OK, otherwise it will look broken for a fraction\n              of a second. */\n              if (this.fieldContainer !== null && this.cardContainer !== null) {\n                // Apply the theme framework control component class to the square card field wrapper\n                this.cardContainer.querySelector('.sq-card-iframe-container').classList.add('gform-theme-field-control');\n                if (external_jQuery_default()(this.fieldContainer).is(':hidden')) {\n                  this.cardContainer.style.visibility = 'hidden';\n                }\n              }\n              this.bindCardEventListeners.bind(this);\n              this.bindCardEventListeners(this.card);\n              _context2.next = 18;\n              break;\n            case 14:\n              _context2.prev = 14;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(_context2.t0);\n              if (this.pageType === 'front') {\n                this.errorStack.push('generic', this.strings.CATCH_ALL);\n              }\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[1, 14]]);\n      }));\n      function render() {\n        return _render.apply(this, arguments);\n      }\n      return render;\n    }()\n    /**\n     * @function getCardConfigurationStyleObject\n     * @description Calculates the style for the cardholder name input, to be used for the inputs inside the square IFrame.\n     *\n     * @since 1.7\n     *\n     */\n    )\n  }, {\n    key: \"getCardConfigurationStyleObject\",\n    value: function getCardConfigurationStyleObject() {\n      // If this has keys, the theme framework is being used and we can bail here.\n      if (Object.keys(this.styleObject).length !== 0) {\n        return this.styleObject;\n      }\n      var styleObject = {};\n      var formControl = this.cardHolderNameInput === null ? document.querySelector('input.sq-input') : this.cardHolderNameInput;\n\n      // Only run this if the Square element is present\n      if (!formControl) {\n        return {};\n      }\n\n      // Setup default styles based on the card name input\n      var sqInputStyle = window.getComputedStyle(formControl);\n      styleObject = {\n        '.input-container': {\n          borderColor: sqInputStyle.getPropertyValue('border-color'),\n          borderRadius: sqInputStyle.getPropertyValue('border-radius'),\n          borderWidth: sqInputStyle.getPropertyValue('border-width')\n        },\n        input: {\n          backgroundColor: sqInputStyle.getPropertyValue('background-color'),\n          color: sqInputStyle.getPropertyValue('color'),\n          fontSize: sqInputStyle.getPropertyValue('font-size'),\n          fontWeight: sqInputStyle.getPropertyValue('font-weight')\n        },\n        'input::placeholder': {\n          color: sqInputStyle.getPropertyValue('color')\n        }\n      };\n\n      /**\n       * Filter the style object that is passed to the square SDK to style the credit card details iframe and its contents.\n       *\n       * @see https://developer.squareup.com/reference/sdks/web/payments/objects/CardClassSelectors\n       *\n       * @since 1.7\n       *\n       * @param {object} styleObject The style object that contains the style selectors, properties and values.\n       * @param {Int}    formId      The formId.\n       *\n       * @return {object} The filtered style object.\n       */\n      styleObject = gform.applyFilters('gform_square_card_details_style', styleObject, this.formId);\n      return styleObject;\n    }\n\n    /**\n     * @function maybeReconfigureCardSize\n     * @description Triggers a resize event and reconfigures the card in case the card was hidden on form load\n     * for example when conditional logic exists or the form is conversational.\n     *\n     * @since 1.7\n     * @since 2.0 renamed method to maybeReconfigureCardSize instead of handlePostConditionalLogic.\n     *\n     */\n  }, {\n    key: \"maybeReconfigureCardSize\",\n    value: function maybeReconfigureCardSize() {\n      var _this = this;\n      // The event is fired many times for a single change.\n      // Clear the timeout of the previous calls so the logic eventually runs once.\n      if (this.conditionalLogicTimeout !== null) {\n        clearTimeout(this.conditionalLogicTimeout);\n      }\n      this.conditionalLogicTimeout = setTimeout(function () {\n        if (_this.field !== null && external_jQuery_default()(_this.field).is(':visible')) {\n          // Get the style object again after the input has become visible.\n          _this.webPayments.reConfigureCard({\n            style: _this.getCardConfigurationStyleObject()\n          });\n\n          // Trigger window resize to let the square IFrame re-calculate its size if the field became visible.\n          var ResizeEvent = document.createEvent('HTMLEvents');\n          ResizeEvent.initEvent('resize', true, false);\n          window.dispatchEvent(ResizeEvent);\n          if (_this.cardContainer !== null) {\n            _this.cardContainer.style.visibility = 'visible';\n          }\n        }\n      }, 250);\n    }\n\n    /**\n     * @function bindCardEventListeners\n     * @description Binds event listeners for UI events of the card.\n     *\n     * @since 1.7\n     *\n     * @param {object} card The Square card.\n     */\n  }, {\n    key: \"bindCardEventListeners\",\n    value: function bindCardEventListeners(card) {\n      card.addEventListener('focusClassAdded', this.handleCardUIChange.bind(this));\n      card.addEventListener('focusClassRemoved', this.handleCardUIChange.bind(this));\n      card.addEventListener('errorClassAdded', this.handleCardUIChange.bind(this));\n      card.addEventListener('errorClassRemoved', this.handleCardUIChange.bind(this));\n      card.addEventListener('escape', this.handleCardUIChange.bind(this));\n    }\n\n    /**\n     * @function handleCardUIChange\n     * @description Handles UI for when the card loses/gets focus.\n     *\n     * When the card gets focus, a textual message appears beneath it, this function adds a margin for the label when it is below the card\n     * so the textual message don't overflow over the label, it also resets the margin once the card loses focus as the textual message disappears.\n     *\n     * @since 1.7\n     *\n     * @param {object} event The card UI event.\n     *\n     * @return {Promise<void>}\n     */\n  }, {\n    key: \"handleCardUIChange\",\n    value: (function () {\n      var _handleCardUIChange = (0,asyncToGenerator[\"default\"])( /*#__PURE__*/regenerator_default().mark(function _callee3(event) {\n        var sdkMessage;\n        return regenerator_default().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(this.pageType === 'block')) {\n                _context3.next = 2;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 2:\n              _context3.t0 = event.type;\n              _context3.next = _context3.t0 === 'focusClassAdded' ? 5 : _context3.t0 === 'errorClassAdded' ? 5 : _context3.t0 === 'focusClassRemoved' ? 7 : _context3.t0 === 'errorClassRemoved' ? 7 : 9;\n              break;\n            case 5:\n              // The SDK provides localized messages\n              // The container is hidden because it doesn't match our UI\n              // So we are going to take the text and push it to our error handler.\n              if (event.type === 'errorClassAdded') {\n                sdkMessage = external_jQuery_default()('#gform_' + this.formId + ' .sq-card-message').text();\n                this.errorStack.push(event.detail.field, sdkMessage, true);\n              }\n              return _context3.abrupt(\"break\", 9);\n            case 7:\n              if (event.type === 'errorClassRemoved') {\n                this.errorStack.remove(event.detail.field);\n\n                // If this was the last error to be cleared, reset our error stack as well.\n                if (event.detail.currentState.hasErrorClass === false) {\n                  this.errorStack.clearErrors();\n                }\n              }\n              return _context3.abrupt(\"break\", 9);\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function handleCardUIChange(_x) {\n        return _handleCardUIChange.apply(this, arguments);\n      }\n      return handleCardUIChange;\n    }())\n  }]);\n}();\n\n// EXTERNAL MODULE: ../../@babel/runtime/helpers/esm/typeof.js\nvar esm_typeof = __webpack_require__(\"../../@babel/runtime/helpers/esm/typeof.js\");\n;// CONCATENATED MODULE: ../../../assets/js/src/common/square/card-styles.js\n\n/* eslint-disable */\n/* global gform */\nvar cardStyles = function cardStyles(formId, pageInstance) {\n  var cardStyle = cardStyle || {};\n  gform.extensions.styles.gravityformssquare[formId] = gform.extensions.styles.gravityformssquare[formId] || {};\n  var componentStyles = gform.extensions.styles.gravityformssquare[formId][pageInstance] || {};\n  var setComponentStyleValue = function setComponentStyleValue(key, value, themeFrameworkStyles, manualElement) {\n    var resolvedValue = '';\n    // If the value provided is a custom property let's begin\n    if (value.indexOf('--') === 0) {\n      var computedValue = themeFrameworkStyles.getPropertyValue(value);\n\n      // If we have a computed end value from the custom property, let's use that\n      if (computedValue) {\n        resolvedValue = computedValue;\n      }\n      // Otherwise, let's use a provided element or the form wrapper\n      // along with the key to nab the computed end value for the CSS property\n      else {\n        var selector = manualElement ? getComputedStyle(manualElement) : themeFrameworkStyles;\n        var resolvedKey = key === 'fontSmoothing' ? '-webkit-font-smoothing' : key;\n        resolvedValue = selector.getPropertyValue(resolvedKey.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase());\n      }\n    }\n    // Otherwise let's treat the provided value as the actual CSS value wanted\n    else {\n      resolvedValue = value;\n    }\n    return resolvedValue.trim();\n  };\n  var setComponentStyles = function setComponentStyles(obj, objKey, parentKey) {\n    // If our object doesn't have any styles specified, let's bail here\n    if (Object.keys(obj).length === 0) {\n      return;\n    }\n\n    // Grab the computed styles for the form, which the global CSS API and theme framework are scoped to\n    var form = document.getElementById('gform_' + formId);\n    var themeFrameworkStyles = getComputedStyle(form);\n\n    // Grab the first form control in the form for fallback CSS property value computation\n    var firstFormControl = form.querySelector('.gfield input');\n\n    // Note, this currently only supports three levels deep of object nesting.\n    Object.keys(obj).forEach(function (key) {\n      // Handling of keys that are objects with additional key/value pairs\n      if ((0,esm_typeof[\"default\"])(obj[key]) === 'object') {\n        // Create object for top level key\n        if (!parentKey) {\n          cardStyle[key] = {};\n        }\n\n        // Create object for second level key\n        if (parentKey) {\n          cardStyle[parentKey][key] = {};\n        }\n        var objPath = parentKey ? parentKey : key;\n\n        // Recursively pass each key's object through our method for continued processing\n        setComponentStyles(obj[key], key, objPath);\n        return;\n      }\n\n      // Handling of keys that are not objects and need their value to be set\n      if ((0,esm_typeof[\"default\"])(obj[key]) !== 'object') {\n        var value = '';\n        // Handling of nested keys\n        if (parentKey) {\n          if (objKey && objKey !== parentKey) {\n            // Setting value for a key three levels into the object\n            value = setComponentStyleValue(key, componentStyles[parentKey][objKey][key], themeFrameworkStyles, firstFormControl);\n            if (value) {\n              cardStyle[parentKey][objKey][key] = value;\n            }\n          } else {\n            // Setting value for a key two levels into the object\n            value = setComponentStyleValue(key, componentStyles[parentKey][key], themeFrameworkStyles, firstFormControl);\n            if (value) {\n              cardStyle[parentKey][key] = value;\n            }\n          }\n        } else {\n          // Setting value for a key one level into the object\n          value = setComponentStyleValue(key, componentStyles[key], themeFrameworkStyles, firstFormControl);\n          if (value) {\n            cardStyle[key] = value;\n          }\n        }\n      }\n    });\n  };\n  setComponentStyles(componentStyles);\n  return cardStyle;\n};\n/* harmony default export */ var card_styles = (cardStyles);\n;// CONCATENATED MODULE: ../../../assets/js/src/theme/square/frontend-handler.js\n\n\n\n\n\n/* eslint-disable */\n\n\n\n\n\n\n\n/**\n * Handles the frontend logic of the add-on.\n */\nvar FrontEndHandler = /*#__PURE__*/function () {\n  function FrontEndHandler(args) {\n    (0,classCallCheck[\"default\"])(this, FrontEndHandler);\n    for (var prop in args) {\n      if (args.hasOwnProperty(prop)) {\n        this[prop] = args[prop];\n      }\n    }\n    this.fields = {\n      cardNumber: 1,\n      expirationDate: 1,\n      cvv: 1,\n      postalCode: 1,\n      cardHolderName: 3\n    };\n    this.cardStyles = card_styles(this.formId, this.pageInstance);\n    this.errorStack = new a11yErrorHandler(this.fields, this.formId, this.ccFieldId);\n    this.webPayments = new WebPayments(this.formId, this.application_id, this.location_id);\n    this.cardRenderer = new CardRenderer(this.webPayments, this.errorStack, this.formId, 0, this.ccFieldId, this.cardStyles, 'front', gforms_square_theme_strings);\n    square_helpers.formId = this.formId;\n    this.cacheElements();\n    this.bindEvents();\n    this.cardRenderer.render();\n  }\n\n  /**\n   * @function cacheElements\n   * @description Caches the elements used in the process of creating and submitting the form.\n   *\n   * @since 1.7\n   *\n   */\n  return (0,createClass[\"default\"])(FrontEndHandler, [{\n    key: \"cacheElements\",\n    value: function cacheElements() {\n      this.form = external_jQuery_default()('#gform_' + this.formId);\n      this.GFSField = external_jQuery_default()('#input_' + this.formId + '_' + this.ccFieldId);\n      this.GFSCCInput = external_jQuery_default()('#input_' + this.formId + '_' + this.ccFieldId + '_1');\n      this.fieldContainer = external_jQuery_default()('.ginput_container_square_card');\n    }\n\n    /**\n     * @function bindEvents\n     * @description Binds events handlers for the form and feed conditional logic.\n     *\n     * @since 1.7\n     *\n     */\n  }, {\n    key: \"bindEvents\",\n    value: function bindEvents() {\n      // After feeds are evaluated, handle square feed if it exists and active.\n      gform.addAction('gform_frontend_feeds_evaluated', this.handleFeedEvaluated.bind(this));\n\n      // bind Square functionality to submit event.\n      external_jQuery_default()('#gform_' + this.formId).on('submit', this.handleFormSubmit.bind(this));\n\n      // Set priority to 51 so it will be triggered after the coupons add-on\n      gform.addFilter('gform_product_total', function (total, formId) {\n        window['gform_square_amount_' + formId] = total;\n        return total;\n      }, 51);\n    }\n\n    /**\n     * @function handleFeedEvaluated\n     * @description Handles showing/hiding the field after feed conditional logic is evaluated.\n     *\n     * @since 1.0.0\n     *\n     * @param {Array}   feeds  All feeds that were evaluated.\n     * @param {Integer} formId The id of the form.\n     *\n     */\n  }, {\n    key: \"handleFeedEvaluated\",\n    value: function handleFeedEvaluated(feeds, formId) {\n      if (formId != parseInt(this.formId)) {\n        return;\n      }\n      this.activeFeed = null;\n      this.feedActivated = false;\n      // Loop through the feeds and Check if square feed is active.\n      var feedsCount = Object.keys(feeds).length;\n      for (var i = 0; i < feedsCount; i++) {\n        if (feeds[i].addonSlug === 'gravityformssquare' && feeds[i].isActivated) {\n          this.feedHasConditionalLogic = feeds[i].conditionalLogic;\n          this.feedActivated = true;\n          // Add the active feed object to the square object as it will be needed later.\n          this.activeFeed = this.feeds[feeds[i].feedId];\n\n          // check if we are in the cc page, if so initiate the Square single element payment form.\n          if (square_helpers.isCreditCardOnPage(this.ccPage)) {\n            this.feedConditionalLogicResult = true;\n          }\n          break; // allow only one active feed.\n        }\n      }\n\n      // If no active feeds found, display error next to Square Card Field.\n      if (!this.feedActivated) {\n        this.feedConditionalLogicResult = false;\n        // Show error.\n        this.errorStack.push('generic', gforms_square_theme_strings.no_active_frontend_feed);\n        // Hide inputs.\n        this.fieldContainer.hide();\n        // remove square fields and form status when Square feed deactivated.\n        square_helpers.resetSquareStatus(this.form, formId);\n        square_helpers.resetFormStatus(this.form, formId);\n        this.activeFeed = null;\n      } else {\n        this.errorStack.remove('generic');\n        this.fieldContainer.show();\n      }\n    }\n\n    /**\n     * @function handleFormSubmit\n     * @description Handles form submission by validating the name and tokenizing the card.\n     *\n     * @since 1.7\n     *\n     * @param {object} event The form submission event.\n     *\n     * @return {Promise<boolean>}\n     */\n  }, {\n    key: \"handleFormSubmit\",\n    value: (function () {\n      var _handleFormSubmit = (0,asyncToGenerator[\"default\"])( /*#__PURE__*/regenerator_default().mark(function _callee(event) {\n        var _this = this;\n        var sourcePage, targetPage, skipSqFormHandler, fullName, names;\n        return regenerator_default().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (this.canSubmitToSquare()) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\", true);\n            case 2:\n              this.form.data('gfsquaresubmitting', true);\n              square_helpers.maybeAddSpinner(false, this.formId);\n              this.form = external_jQuery_default()('#gform_' + this.formId);\n              square_helpers.updatePaymentAmount(this.formId, this.activeFeed);\n\n              // Skip square logic if clicking on the Previous button, not the right page or if total amount is 0.\n              sourcePage = parseInt(external_jQuery_default()('#gform_source_page_number_' + this.formId).val(), 10), targetPage = parseInt(external_jQuery_default()('#gform_target_page_number_' + this.formId).val(), 10), skipSqFormHandler = false;\n              if (sourcePage > targetPage && targetPage !== 0 || window['gform_square_amount_' + this.formId] === 0) {\n                true, (0,readOnlyError[\"default\"])(\"skipSqFormHandler\");\n              }\n              if (!(square_helpers.isLastPage() && !square_helpers.isCreditCardOnPage() || gformIsHidden(this.GFSCCInput) || skipSqFormHandler)) {\n                _context.next = 10;\n                break;\n              }\n              return _context.abrupt(\"return\", true);\n            case 10:\n              event.preventDefault();\n\n              // Get the cardholder first and last name to make sure we can start SCA later.\n              fullName = external_jQuery_default()('#input_' + this.formId + '_' + this.ccFieldId + '_' + this.fields.cardHolderName.toString()).val(), names = fullName.trim().split(' '); // If we don't have a name show error and stop execution.\n              if (!(names.length < 2)) {\n                _context.next = 16;\n                break;\n              }\n              this.errorStack.push('cardHolderName', gforms_square_theme_strings.requires_name);\n              square_helpers.resetFormStatus(this.form, this.formId);\n              return _context.abrupt(\"return\", false);\n            case 16:\n              this.errorStack.remove('cardHolderName');\n              square_helpers.resetSquareStatus();\n              _context.prev = 18;\n              _context.next = 21;\n              return this.webPayments.getTokenizeCard();\n            case 21:\n              this.tokenizedCard = _context.sent;\n              if (this.tokenizedCard.status === 'OK') {\n                this.nonceReceived(this.tokenizedCard.token, this.tokenizedCard.details.card);\n              } else {\n                if (this.tokenizedCard.errors.length > 0) {\n                  this.tokenizedCard.errors.forEach(function (error) {\n                    _this.errorStack.push(error.field, error.message);\n                  });\n                }\n                square_helpers.resetFormStatus(this.form, this.formId);\n              }\n              _context.next = 29;\n              break;\n            case 25:\n              _context.prev = 25;\n              _context.t0 = _context[\"catch\"](18);\n              this.errorStack.push('generic', gforms_square_theme_strings.CATCH_ALL);\n              square_helpers.resetFormStatus(this.form, this.formId);\n            case 29:\n              return _context.abrupt(\"return\", false);\n            case 30:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[18, 25]]);\n      }));\n      function handleFormSubmit(_x) {\n        return _handleFormSubmit.apply(this, arguments);\n      }\n      return handleFormSubmit;\n    }()\n    /**\n     * @function nonceReceived\n     * @description Fired when the nonce received from Square after calling getCardNonce\n     *\n     * @since 1.0.0\n     *\n     * @since 1.7.0 Moved error handling to form submission handler.\n     *\n     * @param {string} nonce    The card token.\n     * @param {object} cardData The card data object that contains information like last 4\n     *\n     * @return {Promise<boolean>}\n     */\n    )\n  }, {\n    key: \"nonceReceived\",\n    value: (function () {\n      var _nonceReceived = (0,asyncToGenerator[\"default\"])( /*#__PURE__*/regenerator_default().mark(function _callee2(nonce, cardData) {\n        return regenerator_default().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              this.errorStack.clearErrors();\n              // Add card data to hidden inputs so they can be saved with the entry.\n              this.form.append(external_jQuery_default()('<input type=\"hidden\" name=\"square_credit_card_last_four\" id=\"' + this.formId + '_square_credit_card_last_four\" />').val(cardData.last4));\n              this.form.append(external_jQuery_default()('<input type=\"hidden\" name=\"square_credit_card_type\" id=\"' + this.formId + '_square_credit_card_type\"/>').val(cardData.brand));\n              this.form.append(external_jQuery_default()('<input type=\"hidden\" name=\"square_nonce\" id=\"' + this.formId + '_square_nonce\" />').val(nonce));\n              // If we already have a nonce, start SCA, If SCA Passes, form will be submitted.\n              _context2.next = 6;\n              return this.startSCA(nonce);\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function nonceReceived(_x2, _x3) {\n        return _nonceReceived.apply(this, arguments);\n      }\n      return nonceReceived;\n    }()\n    /**\n     * @function startSCA\n     * @description Starts SCA process, if not required, will submit the form.\n     *\n     * @param {string} nonce The card token.\n     *\n     * @since 1.0.0\n     *\n     * @return boolean\n     */\n    )\n  }, {\n    key: \"startSCA\",\n    value: (function () {\n      var _startSCA = (0,asyncToGenerator[\"default\"])( /*#__PURE__*/regenerator_default().mark(function _callee3(nonce) {\n        var full_name, names, first_name, last_name, email, city, postalCode, addressLine1, addressLine2, billingContact, verificationDetails, verificationResults;\n        return regenerator_default().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              // Get the cardholder first and last name to start SCA.\n              full_name = external_jQuery_default()('#input_' + this.formId + '_' + this.ccFieldId + '_3').val();\n              names = full_name.trim().split(' '); // If we don't have a name show error and stop execution.\n              if (!(names.length < 2)) {\n                _context3.next = 6;\n                break;\n              }\n              this.errorStack.push('cardHolderName', gforms_square_theme_strings.requires_name);\n              this.resetFormStatus(this.form, this.formId, this.isLastPage());\n              return _context3.abrupt(\"return\", false);\n            case 6:\n              this.errorStack.remove('cardHolderName');\n              first_name = names[0];\n              last_name = names[1]; // Prepare any given billing information to be provided along with the names for SCA.\n              email = GFMergeTag.replaceMergeTags(this.formId, square_helpers.getBillingAddressMergeTag(this.activeFeed.email));\n              city = GFMergeTag.replaceMergeTags(this.formId, square_helpers.getBillingAddressMergeTag(this.activeFeed.address_city));\n              postalCode = GFMergeTag.replaceMergeTags(this.formId, square_helpers.getBillingAddressMergeTag(this.activeFeed.address_zip));\n              addressLine1 = GFMergeTag.replaceMergeTags(this.formId, square_helpers.getBillingAddressMergeTag(this.activeFeed.address_line1));\n              addressLine2 = GFMergeTag.replaceMergeTags(this.formId, square_helpers.getBillingAddressMergeTag(this.activeFeed.address_line2)); // Collect rest of verification data if we have minimum required details.\n              if (!(first_name === '' || last_name === '')) {\n                _context3.next = 16;\n                break;\n              }\n              return _context3.abrupt(\"return\", false);\n            case 16:\n              billingContact = {\n                givenName: first_name,\n                familyName: last_name\n              }; // Add only available billing information to contact object.\n              if (email !== '') {\n                billingContact.email = email;\n              }\n              if (city !== '') {\n                billingContact.city = city;\n              }\n              if (postalCode !== '') {\n                billingContact.postalCode = postalCode;\n              }\n              if (addressLine1 !== '') {\n                billingContact.addressLines = [];\n                billingContact.addressLines.push(addressLine1);\n              }\n              if (addressLine2 !== '') {\n                billingContact.addressLines.push(addressLine2);\n              }\n              verificationDetails = {\n                intent: 'CHARGE',\n                amount: window['gform_square_amount_' + this.formId].toString(),\n                currencyCode: this.currency,\n                billingContact: billingContact\n              }; // Start SCA.\n              _context3.prev = 23;\n              _context3.next = 26;\n              return this.webPayments.getPaymentsApi().verifyBuyer(nonce, verificationDetails);\n            case 26:\n              verificationResults = _context3.sent;\n              this.form.append(external_jQuery_default()('<input type=\"hidden\" name=\"square_verification\" id=\"' + this.formId + '_square_verification\" />').val(verificationResults.token));\n              this.form.submit();\n              _context3.next = 35;\n              break;\n            case 31:\n              _context3.prev = 31;\n              _context3.t0 = _context3[\"catch\"](23);\n              this.errorStack.push('generic', gforms_square_theme_strings.sca);\n              square_helpers.resetFormStatus(this.form, this.formId);\n            case 35:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[23, 31]]);\n      }));\n      function startSCA(_x4) {\n        return _startSCA.apply(this, arguments);\n      }\n      return startSCA;\n    }()\n    /**\n     * Checks if the form can be submitted or not.\n     *\n     * @since 1.0.0\n     *\n     * @return {boolean}\n     */\n    )\n  }, {\n    key: \"canSubmitToSquare\",\n    value: function canSubmitToSquare() {\n      // We cannot submit to Square if any of the cases are true.\n      switch (true) {\n        // Field is not currently shown.\n        case !this.GFSCCInput.is(':visible'):\n        case gformIsHidden(this.GFSCCInput):\n        case !square_helpers.isCreditCardOnPage(this.ccPage):\n          return false;\n        // No active Square feed.\n        case !this.feedActivated:\n          return false;\n        // Already submitting.\n        case this.form.data('gfsquaresubmitting'):\n          return false;\n        // Saving.\n        case external_jQuery_default()('#gform_save_' + this.formId).val() == 1:\n          return false;\n        // reCAPTCHA is pending a result.\n        case typeof gformIsRecaptchaPending !== 'undefined' && gformIsRecaptchaPending(this.form):\n          return false;\n        default:\n          return true;\n      }\n    }\n  }]);\n}();\n\n;// CONCATENATED MODULE: ../../../assets/js/src/theme/square/index.js\n/* global gform */\n\nvar init = function init() {\n  gform.extensions = gform.extensions || {};\n  gform.extensions.styles = gform.extensions.styles || {};\n  gform.extensions.styles.gravityformssquare = gform.extensions.styles.gravityformssquare || {};\n  window.GFSquare = function (args) {\n    window.SquareFrontEndHandler = new FrontEndHandler(args);\n  };\n};\n/* harmony default export */ var square = (init);\n;// CONCATENATED MODULE: ../../../assets/js/src/theme/block-editor/index.js\n/* eslint-disable */\n\n/* global GFSquareBlockStrings */\n/**\n * @module\n * @exports ready\n * @description The core dispatcher for the dom ready event in javascript.\n *\n */\n\n\n\n\n\n\n\n\n/**\n * @function bindEvents\n * @description Bind global event listeners here,\n *\n */\nvar cardRenderer = {};\n\n/**\n * @function init\n * @description The core dispatcher for init across the codebase.\n *\n */\n\nvar block_editor_init = function init() {\n  external_jQuery_default()(document).ready(function () {\n    var getBlockList = function getBlockList() {\n      return wp.data.select('core/block-editor').getBlocks();\n    };\n    var blockList = getBlockList();\n    wp.data.subscribe(function () {\n      var newBlockList = getBlockList();\n      var blockListChanged = newBlockList !== blockList;\n      blockList = newBlockList;\n      if (blockListChanged) {\n        setTimeout(renderBlockCard, 2000);\n      }\n    });\n    renderBlockCard();\n  });\n};\nvar renderBlockCard = function renderBlockCard() {\n  gform.extensions = gform.extensions || {};\n  gform.extensions.styles = gform.extensions.styles || {};\n  gform.extensions.styles.gravityformssquare = gform.extensions.styles.gravityformssquare || {};\n  var webPayments = new WebPayments(gforms_square_theme_strings.gformSquareBlockStrings.formId, gforms_square_theme_strings.gformSquareBlockStrings.applicationId, gforms_square_theme_strings.gformSquareBlockStrings.locationId);\n  var styleObject = card_styles(gforms_square_theme_strings.gformSquareBlockStrings.formId, gforms_square_theme_strings.gformSquareBlockStrings.pageInstance);\n  if ('card' in cardRenderer && cardRenderer.card !== null) {\n    cardRenderer.card.destroy();\n  }\n  cardRenderer = new CardRenderer(webPayments, null, gforms_square_theme_strings.gformSquareBlockStrings.formId, gforms_square_theme_strings.gformSquareBlockStrings.pageInstance, gforms_square_theme_strings.gformSquareBlockStrings.ccFieldId, styleObject, 'block', gforms_square_theme_strings.gformSquareBlockStrings);\n  square_helpers.formId = gforms_square_theme_strings.gformSquareBlockStrings.formId;\n  console.info('Gravity Forms Square: Initialized all Block Editor that targeted document ready.');\n};\n\n/**\n * @function domReady\n * @description Export our dom ready enabled init.\n *\n */\n\nvar domReady = function domReady() {\n  (0,src.ready)(block_editor_init);\n};\n/* harmony default export */ var block_editor = (domReady);\n;// CONCATENATED MODULE: ../../../assets/js/src/theme/core/ready.js\n/* eslint-disable */\n\n/**\n * @module\n * @exports ready\n * @description The core dispatcher for the dom ready event in javascript.\n *\n */\n\n\n\n\n/**\n * @function bindEvents\n * @description Bind global event listeners here.\n *\n */\nvar bindEvents = function bindEvents() {\n  console.log('Binding theme events');\n};\n\n/**\n * @function init\n * @description The core dispatcher for init across the codebase.\n *\n */\n\nvar ready_init = function init() {\n  // initialize global events\n\n  bindEvents();\n  if (wp.blocks) {\n    setTimeout(function () {\n      block_editor();\n    }, 5000);\n  } else {\n    square();\n  }\n  console.info('Gravity Forms Square: Initialized all javascript that targeted document ready.');\n};\n\n/**\n * @function domReady\n * @description Export our dom ready enabled init.\n *\n */\n\nvar ready_domReady = function domReady() {\n  (0,src.ready)(ready_init);\n};\n/* harmony default export */ var ready = (ready_domReady);\n;// CONCATENATED MODULE: ../../../assets/js/src/theme/index.js\n\nready();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../assets/js/src/theme/index.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	!function() {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = function(result, chunkIds, fn, priority) {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var chunkIds = deferred[i][0];
/******/ 				var fn = deferred[i][1];
/******/ 				var priority = deferred[i][2];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	!function() {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	!function() {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"scripts-theme": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = function(parentChunkLoadingFunction, data) {
/******/ 			var chunkIds = data[0];
/******/ 			var moreModules = data[1];
/******/ 			var runtime = data[2];
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkgform_square"] = self["webpackChunkgform_square"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["vendor-theme"], function() { return __webpack_require__("../../core-js/modules/es.array.iterator.js"); })
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["vendor-theme"], function() { return __webpack_require__("../../../assets/js/src/theme/index.js"); })
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;